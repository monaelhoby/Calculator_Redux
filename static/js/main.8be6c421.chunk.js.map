{"version":3,"sources":["components/buttons.js","components/operators.js","container/body.js","App.js","serviceWorker.js","index.js","store/reducers/index.js"],"names":["Buttons","props","elems","i","row","nums","j","push","onClick","ButtonPressed","className","Operators","operates","operate","list","Body","this","value","calcVal","Operate","Component","connect","state","resultVal","result","dispatch","type","store","createStore","Reducer","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","initState","action","CalculateResult","text","eval","Validate","slice","split","pop","join"],"mappings":"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","file":"static/js/main.8be6c421.chunk.js","sourcesContent":["import React from 'react';\r\nimport './style.css';\r\n\r\n\r\nconst Buttons = props => {\r\n  let elems = [];\r\n    for(let i=0 ; i <4 ; i++){\r\n    let row =[];\r\n    let nums=[[1,2,3], [4,5,6], [7,8,9], [0,\"=\" , \".\"]];\r\n    for(let j=0 ; j<3 ; j++){\r\n      row.push(\r\n        <button onClick={() => props.ButtonPressed(nums[i][j])} className=\"btns\" >\r\n          {nums[i][j]}\r\n        </button>\r\n      )\r\n    }\r\n    elems.push(\r\n      <div className=\"row\">{row}</div>\r\n    )\r\n  }\r\n   return (\r\n       <div>\r\n       {elems}\r\n       </div>\r\n   )\r\n}\r\n\r\nexport default Buttons\r\n","import React, {Fragment} from 'react'\r\nimport './style.css';\r\n\r\nconst Operators = props => {\r\n  let operates =[] ;\r\n    for(let i=0 ; i <5 ; i++){\r\n      let operate= []\r\n      let list=[\"C\", \"+\", \"-\", \"*\", \"/\"];\r\n        operate.push(\r\n          <button onClick={() => props.operate(list[i])} className=\"btncs\">\r\n            {list[i]}\r\n          </button>\r\n        )\r\n        operates.push(\r\n          <Fragment className=\"operations\">{operate}</Fragment>\r\n        )\r\n    }\r\n  return (\r\n    <div>{operates}</div>\r\n  )\r\n}\r\n\r\nexport default Operators\r\n","\r\n\r\nimport React, {Component} from 'react';\r\nimport Buttons from '../components/buttons.js';\r\nimport Operators from '../components/operators.js';\r\nimport './style.css';\r\nimport {connect} from 'react-redux';\r\n\r\n\r\nclass Body extends Component {\r\n\r\n  render () {\r\n    // console.log(this.props);\r\n  return (\r\n    <div className=\"body-calculator\">\r\n      <div className=\"result\">\r\n      <h4 className=\"resultText\">{this.props.value}</h4>\r\n      </div>\r\n    <div className=\"calculation\">\r\n      <p className=\"calculationText\">{this.props.calcVal}</p>\r\n      </div>\r\n    <div className=\"buttons\">\r\n      <div className=\"numbers\">\r\n      <Buttons ButtonPressed={ this.props.ButtonPressed}/>\r\n    </div>\r\n    <div className=\"operations\">\r\n      <Operators operate={this.props.Operate }/>\r\n    </div>\r\n      </div>\r\n    </div>\r\n    )\r\n  }\r\n}\r\n\r\nfunction mapStateToProps (state){\r\n  return {\r\n    value : state.resultVal,\r\n    result : state.calcVal\r\n  }\r\n}\r\n\r\nfunction mapDispatchToProp (dispatch){\r\n  return {\r\n    ButtonPressed : (value) => dispatch({type: 'BUTTONPRESSED',value}),\r\n    Operate : (value) => dispatch({type: 'OPERATOR',value})\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProp)(Body);\r\n","import React, {Component} from 'react';\nimport './App.css';\nimport Body from './container/body.js';\nimport {createStore} from 'redux';\nimport Reducer from './store/reducers';\nimport {Provider} from 'react-redux';\n\n\nconst store = createStore(Reducer);\n\nclass App extends Component {\n\n  render (){\n  return (\n    <div className=\"container\">\n      <Provider store={store}>\n      <Body />\n      </Provider>\n    </div>\n  );\n}\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore} from 'redux';\nimport Reducer from './store/reducers';\nimport {Provider} from 'react-redux';\n\n\nconst store = createStore(Reducer);\n\nReactDOM.render(\n  <Provider store={store}>\n  <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","\r\nconst initState = {\r\n  resultVal : '',\r\n  calcVal : ''\r\n}\r\n\r\nconst Reducer = ( state = initState , action) => {\r\n\r\n// claculate result\r\n const CalculateResult = () => {\r\n     let text = state.resultVal;\r\n       return {\r\n               calcVal : eval(text),\r\n               resultVal: eval(text)\r\n            }\r\n     }\r\n\r\n  //validate operators\r\n   const Validate = () => {\r\n     const text = state.resultVal;\r\n     switch(text.slice(-1)){\r\n       case '+' :\r\n       case '-' :\r\n       case '*' :\r\n       case '/' :\r\n        return false\r\n     }\r\n     return true\r\n   }\r\n\r\n  if (action.type === \"BUTTONPRESSED\"){\r\n    if( action.value == \"=\"){\r\n      return Validate() && CalculateResult()\r\n    }\r\n     return {resultVal: state.resultVal+action.value};\r\n  }\r\n  if (action.type === \"OPERATOR\"){\r\n    // claculte result after pressed operator\r\n    switch(action.value){\r\n      case 'C' :\r\n      let text = state.resultVal\r\n      text = text.split('')\r\n      text.pop()\r\n        return {resultVal: text.join('')}\r\n         break\r\n      case \"+\" :\r\n      case \"-\" :\r\n      case \"*\" :\r\n      case \"/\" :\r\n        return {resultVal: state.resultVal + action.value }\r\n    }\r\n  }\r\n      return state\r\n}\r\n\r\n\r\nexport default Reducer ;\r\n"],"sourceRoot":""}